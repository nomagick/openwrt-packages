#!/bin/sh /etc/rc.common
# Copyright (C) 2006-2014 OpenWrt.org

START=50
USE_PROCD=1

EXTRA_COMMANDS="istop"
EXTRA_HELP="istop <name>  Stop instance <name>"

append_arg() {
	local cfg="$1"
	local var="$2"
	local opt="$3"
	local def="$4"
	local val

	config_get val "$cfg" "$var"
	[ -n "$val" -o -n "$def" ] && procd_append_param command $opt "${val:-$def}"
}

append_bool() {
	local cfg="$1"
	local var="$2"
	local opt="$3"
	local def="$4"
	local val

	config_get_bool val "$cfg" "$var" "$def"
	[ "$val" = 1 ] && procd_append_param command "$opt"
}

start_instance() {
	local cfg="$1"
	local disabled respawn bind_if listen_if bind_dev listen_dev
	config_get_bool disabled "$cfg" 'disabled' '0'
	[ "$disabled" = 1 ] && return 1

	config_get bind_if "$cfg" bind
	config_get listen_if "$cfg" source

	[ -n "$bind_if" ] && {
		network_is_up $bind_if || {
			logger -t udpxy "Skipping udpxy instance $cfg. Interface $bind_if to bind but not up."
			return 1
		} 
	}

	[ -n "$listen_if" ] && {
		network_is_up $listen_if || {
			logger -t udpxy "Skipping udpxy instance $cfg. Interface $listen_if to listen but not up."
			return 1
		} 
	}

	network_get_device bind_dev "$bind_if";
	network_get_device listen_dev "$listen_if";

	[ -n "$bind_if" -a -z "$bind_dev" ] && {
		logger -t udpxy "Skipping udpxy instance $cfg. Interface $bind_if to bind but device not found."
		return 1
	}
	[ -n "$listen_if" -a -z "$listen_dev" ] && {
		logger -t udpxy "Skipping udpxy instance $cfg. Interface $bind_if to listen but device not found."
		return 1
	}
	
	procd_open_instance "$cfg"

	procd_set_param command /usr/bin/udpxy
	procd_append_param command "-T"

	[ -n "$bind_if" ] && {
		procd_append_param command "-a" "$bind_dev"
	}
	[ -n "$listen_if" ] && {
		procd_append_param command "-m" "$listen_dev"
	}
	
	append_bool "$cfg" verbose "-V"
	append_bool "$cfg" status "-S"
	append_arg "$cfg" port "-p"
	append_arg "$cfg" max_clients "-c"
	append_arg "$cfg" log_file "-l"
	append_arg "$cfg" buffer_size "-B"
	append_arg "$cfg" buffer_messages "-R"
	append_arg "$cfg" buffer_time "-H"
	append_arg "$cfg" nice_increment "-n"
	append_arg "$cfg" mcsub_renew "-M"

	config_get_bool respawn "$cfg" 'respawn' '0'
	[ "$respawn" = 1 ] && procd_set_param respawn

	procd_close_instance
}

service_triggers() { 
	procd_add_reload_trigger "udpxy" 
}

start_service() {
	config_load udpxy
	. /lib/functions/network.sh
	if [ $# -gt 0 ]
	then
		for name in $@
		do
			start_instance $name
		done
	else 
		config_foreach start_instance udpxy
	fi
}

istop() {
	. /lib/functions/procd.sh
	if [ $# -gt 0 ]
	then
		for name in $@
		do
			procd_kill udpxy $name
		done
	else 
		service_stop /usr/bin/udpxy
	fi
}